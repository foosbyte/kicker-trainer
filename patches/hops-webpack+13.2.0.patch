diff --git a/node_modules/hops-webpack/lib/configs/node.js b/node_modules/hops-webpack/lib/configs/node.js
index 994e58f..1dcfa90 100644
--- a/node_modules/hops-webpack/lib/configs/node.js
+++ b/node_modules/hops-webpack/lib/configs/node.js
@@ -30,9 +30,9 @@ module.exports = function getConfig(config, name) {
           require.resolve('@babel/preset-env'),
           {
             modules: false,
-            useBuiltIns: 'entry',
+            useBuiltIns: false,
             targets: { node: config.node },
-            corejs: 3,
+            // corejs: 3,
             include: [],
             exclude: [],
           },
@@ -91,7 +91,7 @@ module.exports = function getConfig(config, name) {
       ...(isProduction
         ? []
         : [require.resolve('webpack/hot/signal') + '?RELOAD']),
-      require.resolve('core-js/stable'),
+      // require.resolve('core-js/stable'),
       require.resolve('../shims/node'),
     ],
     output: {
@@ -125,8 +125,17 @@ module.exports = function getConfig(config, name) {
     module: {
       rules: [{ oneOf: allLoaderConfigs }],
     },
-    externals: [],
+    externals: [
+      'piscina',
+      'react',
+      'lodash.mergewith',
+      'react-dom/server',
+      'react-dom/server.js',
+      'react-dom/server.node',
+      'react-dom/cjs/react-dom-server.node.production.min.js',
+    ],
     optimization: {
+      concatenateModules: false,
       minimizer: [],
     },
     plugins: [
@@ -140,7 +149,7 @@ module.exports = function getConfig(config, name) {
       maxEntrypointSize: 52428800,
       maxAssetSize: 52428800,
     },
-    devtool: 'inline-source-map',
+    devtool: false,
     watchOptions: { aggregateTimeout: 300, ignored: /node_modules/ },
   };
 };
diff --git a/node_modules/hops-webpack/lib/shims/node.js b/node_modules/hops-webpack/lib/shims/node.js
index 3618881..0262918 100644
--- a/node_modules/hops-webpack/lib/shims/node.js
+++ b/node_modules/hops-webpack/lib/shims/node.js
@@ -1,3 +1,5 @@
+const Piscina = require('piscina');
+
 if (!require('module').prototype._compile.__sourceMapSupport) {
   require('source-map-support/register');
 }
@@ -7,7 +9,70 @@ if (module.hot) {
   module.hot.accept('hops/entrypoint');
 }
 
-module.exports = (...args) => {
-  // eslint-disable-next-line node/no-missing-require
-  return require('hops/entrypoint').default(...args);
-};
+class FakeResponse {
+  constructor() {
+    this.locals = {
+      ...Piscina.workerData.locals,
+    };
+    this.miss = false;
+    this.headers = {};
+    this.statusCode = 0;
+    this.url = '';
+    this.html = '';
+    this.error = undefined;
+    this.app = true;
+  }
+  set(headersOrKey, maybeValue) {
+    if (typeof maybeValue !== 'undefined') {
+      this.headers[headersOrKey] = maybeValue;
+    } else {
+      Object.assign(this.headers, headersOrKey);
+    }
+  }
+  redirect(code, url) {
+    this.statusCode = code;
+    this.url = url;
+  }
+  status(code) {
+    this.statusCode = code;
+  }
+  send(html) {
+    this.html = html;
+  }
+  toJSON() {
+    return {
+      miss: this.miss,
+      headers: this.headers,
+      status: this.statusCode,
+      url: this.url,
+      html: this.html,
+      error: this.error,
+    };
+  }
+}
+
+async function initializeWorkeThread() {
+  const middleware = require('hops/entrypoint').default;
+
+  return async function render(req) {
+    const res = new FakeResponse();
+
+    await middleware(req, res, (maybeError) => {
+      res.miss = true;
+      if (maybeError) {
+        res.error = maybeError;
+      }
+    });
+
+    return res.toJSON();
+  };
+}
+
+if (Piscina.isWorkerThread && process.env.NODE_ENV === 'production') {
+  module.exports = initializeWorkeThread();
+} else {
+  module.exports = (...args) => {
+    // eslint-disable-next-line node/no-missing-require
+    return require('hops/entrypoint').default(...args);
+  };
+}
